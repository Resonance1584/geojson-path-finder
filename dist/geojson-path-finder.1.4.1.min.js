/**
 * @license
 * geojson-path-finder
 * ## ISC License
 *
 * Copyright (c) 2016, Per Liedman (per@liedman.net)
 *
 * Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * turf
 * The MIT License (MIT)
 *
 * Copyright (c) 2013 Morgan Herlocker
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * tinyqueue
 * https://github.com/mourner/tinyqueue
 */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.PathFinder=f()}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module,exports){function findNextEnd(e,r,t,n,o,c){for(var i=0,a=0,d=[],s=[];!n[e];){var v=t[e];if(!v)break;var g=Object.keys(v).filter(function(e){return e!==r})[0];if(i+=v[g],c){if(a+=t[g][e],s.indexOf(e)>=0){n[e]=t[e];break}s.push(e)}d.push(o[e]),r=e,e=g}return{vertex:e,weight:i,reverseWeight:a,coordinates:d}}function compactNode(e,r,t,n,o){var c=r[e];return Object.keys(c).reduce(function(i,a){var d=findNextEnd(a,e,r,t,n,o),s=c[a]+d.weight,v=c[a]+d.reverseWeight;if(d.vertex!==e&&((!i.edges[d.vertex]||i.edges[d.vertex]>s)&&(i.edges[d.vertex]=s,i.coordinates[d.vertex]=[n[e]].concat(d.coordinates)),o&&!isNaN(v)&&(!i.incomingEdges[d.vertex]||i.incomingEdges[d.vertex]>v))){i.incomingEdges[d.vertex]=v;var g=[n[e]].concat(d.coordinates);g.reverse(),i.incomingCoordinates[d.vertex]=g}return i},{edges:{},incomingEdges:{},coordinates:{},incomingCoordinates:{}})}function compactGraph(e,r){var t=Object.keys(e).reduce(function(r,t){var n=e[t],o=Object.keys(n),c=o.length;if(1===c){var i=e[o[0]];remove=!i[t]}else 2===c?remove=o.filter(function(r){return e[r][t]}).length===c:remove=!1;return remove||(r[t]=n),r},{});return Object.keys(t).reduce(function(n,o){var c=compactNode(o,e,t,r,!1);return n.graph[o]=c.edges,n.coordinates[o]=c.coordinates,n},{graph:{},coordinates:{}})}module.exports={compactNode:compactNode,compactGraph:compactGraph}},{}],2:[function(require,module,exports){var Queue=require("tinyqueue");module.exports=function(e,r,u){var n={};n[r]=0;for(var t=[0,[r],r],a=new Queue([t],function(e,r){return e[0]-r[0]});a.length;){var i=a.pop(),o=i[0],c=i[2];if(c===u)return i.slice(0,2);var f=e[c];Object.keys(f).forEach(function(e){var r=o+f[e];if(!(e in n)||r<n[e]){n[e]=r;var u=[r,i[1].concat([e]),e];a.push(u)}})}return null}},{tinyqueue:9}],3:[function(require,module,exports){function PathFinder(t,o){o=o||{};var e=topology(t,o),i=o.weightFn||function(t,o){return distance(point(t),point(o))};if(this._sourceVertices=e.vertices,this._keyFn=o.keyFn||function(t){return t.join(",")},this._precision=o.precision||1e-5,this._vertices=e.edges.reduce(function(t,o){var r=o[0],c=o[1],n=o[2],s=i(e.vertices[r],e.vertices[c],n),a=function(o){t[o]||(t[o]={})},h=function(o,e,i){var r=t[o];r[e]=i};return s&&(a(r),a(c),s instanceof Object?(s.forward&&h(r,c,s.forward),s.backward&&h(c,r,s.backward)):(h(r,c,s),h(c,r,s))),t},{}),this._compact=compactor.compactGraph(this._vertices,this._sourceVertices),0===Object.keys(this._compact.graph).length)throw new Error("Compacted graph contains no forks (topology has no intersections).")}var findPath=require("./dijkstra"),topology=require("./topology"),compactor=require("./compactor");point=require("@turf/helpers").point,distance=require("@turf/distance"),module.exports=PathFinder,PathFinder.prototype={findPath:function(t,o){var e=this._keyFn(this._roundCoord(t.geometry.coordinates)),i=this._keyFn(this._roundCoord(o.geometry.coordinates)),r=(this._createPhantom(e),this._createPhantom(i),findPath(this._compact.graph,e,i));if(r){var c=r[0];return r=r[1],{path:r.reduce(function(t,o,e,i){return e>0&&(t=t.concat(this._compact.coordinates[i[e-1]][o])),t}.bind(this),[]).concat([this._sourceVertices[i]]),weight:c}}return null},_roundCoord:function(t){return t.map(function(t){return Math.round(t/this._precision)*this._precision}.bind(this))},_createPhantom:function(t){if(this._compact.graph[t])return null;var o=compactor.compactNode(t,this._vertices,this._compact.graph,this._sourceVertices,!0);return this._compact.graph[t]=o.edges,this._compact.coordinates[t]=o.coordinates,Object.keys(o.incomingEdges).forEach(function(e){this._compact.graph[e][t]=o.incomingEdges[e],this._compact.coordinates[e][t]=o.incomingCoordinates[e]}.bind(this)),t},_removePhantom:function(t){t&&(Object.keys(this._compact.graph[t]).forEach(function(o){delete this._compact.graph[o][t]}.bind(this)),Object.keys(this._compact.coordinates[t]).forEach(function(o){delete this._compact.coordinates[o][t]}.bind(this)),delete this._compact.graph[t],delete this._compact.coordinates[t])}}},{"./compactor":1,"./dijkstra":2,"./topology":10,"@turf/distance":4,"@turf/helpers":6}],4:[function(require,module,exports){var getCoord=require("@turf/invariant").getCoord;var radiansToDistance=require("@turf/helpers").radiansToDistance;module.exports=function(from,to,units){var degrees2radians=Math.PI/180;var coordinates1=getCoord(from);var coordinates2=getCoord(to);var dLat=degrees2radians*(coordinates2[1]-coordinates1[1]);var dLon=degrees2radians*(coordinates2[0]-coordinates1[0]);var lat1=degrees2radians*coordinates1[1];var lat2=degrees2radians*coordinates2[1];var a=Math.pow(Math.sin(dLat/2),2)+Math.pow(Math.sin(dLon/2),2)*Math.cos(lat1)*Math.cos(lat2);return radiansToDistance(2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)),units)}},{"@turf/helpers":6,"@turf/invariant":7}],5:[function(require,module,exports){var featureCollection=require("@turf/helpers").featureCollection;var each=require("@turf/meta").coordEach;var point=require("@turf/helpers").point;module.exports=function(geojson){var points=[];each(geojson,function(coord){points.push(point(coord))});return featureCollection(points)}},{"@turf/helpers":6,"@turf/meta":8}],6:[function(require,module,exports){function feature(geometry,properties){return{type:"Feature",properties:properties||{},geometry:geometry}}module.exports.feature=feature;module.exports.point=function(coordinates,properties){if(!Array.isArray(coordinates))throw new Error("Coordinates must be an array");if(coordinates.length<2)throw new Error("Coordinates must be at least 2 numbers long");return feature({type:"Point",coordinates:coordinates.slice()},properties)};module.exports.polygon=function(coordinates,properties){if(!coordinates)throw new Error("No coordinates passed");for(var i=0;i<coordinates.length;i++){var ring=coordinates[i];if(ring.length<4){throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.")}for(var j=0;j<ring[ring.length-1].length;j++){if(ring[ring.length-1][j]!==ring[0][j]){throw new Error("First and last Position are not equivalent.")}}}return feature({type:"Polygon",coordinates:coordinates},properties)};module.exports.lineString=function(coordinates,properties){if(!coordinates){throw new Error("No coordinates passed")}return feature({type:"LineString",coordinates:coordinates},properties)};module.exports.featureCollection=function(features){return{type:"FeatureCollection",features:features}};module.exports.multiLineString=function(coordinates,properties){if(!coordinates){throw new Error("No coordinates passed")}return feature({type:"MultiLineString",coordinates:coordinates},properties)};module.exports.multiPoint=function(coordinates,properties){if(!coordinates){throw new Error("No coordinates passed")}return feature({type:"MultiPoint",coordinates:coordinates},properties)};module.exports.multiPolygon=function(coordinates,properties){if(!coordinates){throw new Error("No coordinates passed")}return feature({type:"MultiPolygon",coordinates:coordinates},properties)};module.exports.geometryCollection=function(geometries,properties){return feature({type:"GeometryCollection",geometries:geometries},properties)};var factors={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,kilometers:6373,kilometres:6373,feet:20908792.65};module.exports.radiansToDistance=function(radians,units){var factor=factors[units||"kilometers"];if(factor===undefined){throw new Error("Invalid unit")}return radians*factor};module.exports.distanceToRadians=function(distance,units){var factor=factors[units||"kilometers"];if(factor===undefined){throw new Error("Invalid unit")}return distance/factor};module.exports.distanceToDegrees=function(distance,units){var factor=factors[units||"kilometers"];if(factor===undefined){throw new Error("Invalid unit")}return distance/factor*57.2958}},{}],7:[function(require,module,exports){function getCoord(obj){if(Array.isArray(obj)&&typeof obj[0]==="number"&&typeof obj[1]==="number"){return obj}else if(obj){if(obj.type==="Feature"&&obj.geometry&&obj.geometry.type==="Point"&&Array.isArray(obj.geometry.coordinates)){return obj.geometry.coordinates}else if(obj.type==="Point"&&Array.isArray(obj.coordinates)){return obj.coordinates}}throw new Error("A coordinate, feature, or point geometry is required")}function geojsonType(value,type,name){if(!type||!name)throw new Error("type and name required");if(!value||value.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+value.type)}}function featureOf(feature,type,name){if(!name)throw new Error(".featureOf() requires a name");if(!feature||feature.type!=="Feature"||!feature.geometry){throw new Error("Invalid input to "+name+", Feature with geometry required")}if(!feature.geometry||feature.geometry.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)}}function collectionOf(featurecollection,type,name){if(!name)throw new Error(".collectionOf() requires a name");if(!featurecollection||featurecollection.type!=="FeatureCollection"){throw new Error("Invalid input to "+name+", FeatureCollection required")}for(var i=0;i<featurecollection.features.length;i++){var feature=featurecollection.features[i];if(!feature||feature.type!=="Feature"||!feature.geometry){throw new Error("Invalid input to "+name+", Feature with geometry required")}if(!feature.geometry||feature.geometry.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)}}}module.exports.geojsonType=geojsonType;module.exports.collectionOf=collectionOf;module.exports.featureOf=featureOf;module.exports.getCoord=getCoord},{}],8:[function(require,module,exports){function coordEach(layer,callback,excludeWrapCoord){var i,j,k,g,l,geometry,stopG,coords,geometryMaybeCollection,wrapShrink=0,isGeometryCollection,isFeatureCollection=layer.type==="FeatureCollection",isFeature=layer.type==="Feature",stop=isFeatureCollection?layer.features.length:1;for(i=0;i<stop;i++){geometryMaybeCollection=isFeatureCollection?layer.features[i].geometry:isFeature?layer.geometry:layer;isGeometryCollection=geometryMaybeCollection.type==="GeometryCollection";stopG=isGeometryCollection?geometryMaybeCollection.geometries.length:1;for(g=0;g<stopG;g++){geometry=isGeometryCollection?geometryMaybeCollection.geometries[g]:geometryMaybeCollection;coords=geometry.coordinates;wrapShrink=excludeWrapCoord&&(geometry.type==="Polygon"||geometry.type==="MultiPolygon")?1:0;if(geometry.type==="Point"){callback(coords)}else if(geometry.type==="LineString"||geometry.type==="MultiPoint"){for(j=0;j<coords.length;j++)callback(coords[j])}else if(geometry.type==="Polygon"||geometry.type==="MultiLineString"){for(j=0;j<coords.length;j++)for(k=0;k<coords[j].length-wrapShrink;k++)callback(coords[j][k])}else if(geometry.type==="MultiPolygon"){for(j=0;j<coords.length;j++)for(k=0;k<coords[j].length;k++)for(l=0;l<coords[j][k].length-wrapShrink;l++)callback(coords[j][k][l])}else if(geometry.type==="GeometryCollection"){for(j=0;j<geometry.geometries.length;j++)coordEach(geometry.geometries[j],callback,excludeWrapCoord)}else{throw new Error("Unknown Geometry Type")}}}}module.exports.coordEach=coordEach;function coordReduce(layer,callback,memo,excludeWrapCoord){coordEach(layer,function(coord){memo=callback(memo,coord)},excludeWrapCoord);return memo}module.exports.coordReduce=coordReduce;function propEach(layer,callback){var i;switch(layer.type){case"FeatureCollection":for(i=0;i<layer.features.length;i++){callback(layer.features[i].properties,i)}break;case"Feature":callback(layer.properties,0);break}}module.exports.propEach=propEach;function propReduce(layer,callback,memo){propEach(layer,function(prop,i){memo=callback(memo,prop,i)});return memo}module.exports.propReduce=propReduce;function featureEach(layer,callback){if(layer.type==="Feature"){callback(layer,0)}else if(layer.type==="FeatureCollection"){for(var i=0;i<layer.features.length;i++){callback(layer.features[i],i)}}}module.exports.featureEach=featureEach;function coordAll(layer){var coords=[];coordEach(layer,function(coord){coords.push(coord)});return coords}module.exports.coordAll=coordAll;function geomEach(layer,callback){var i,j,g,geometry,stopG,geometryMaybeCollection,isGeometryCollection,isFeatureCollection=layer.type==="FeatureCollection",isFeature=layer.type==="Feature",stop=isFeatureCollection?layer.features.length:1;for(i=0;i<stop;i++){geometryMaybeCollection=isFeatureCollection?layer.features[i].geometry:isFeature?layer.geometry:layer;isGeometryCollection=geometryMaybeCollection.type==="GeometryCollection";stopG=isGeometryCollection?geometryMaybeCollection.geometries.length:1;for(g=0;g<stopG;g++){geometry=isGeometryCollection?geometryMaybeCollection.geometries[g]:geometryMaybeCollection;if(geometry.type==="Point"||geometry.type==="LineString"||geometry.type==="MultiPoint"||geometry.type==="Polygon"||geometry.type==="MultiLineString"||geometry.type==="MultiPolygon"){callback(geometry)}else if(geometry.type==="GeometryCollection"){for(j=0;j<geometry.geometries.length;j++)callback(geometry.geometries[j])}else{throw new Error("Unknown Geometry Type")}}}}module.exports.geomEach=geomEach},{}],9:[function(require,module,exports){"use strict";module.exports=TinyQueue;function TinyQueue(data,compare){if(!(this instanceof TinyQueue))return new TinyQueue(data,compare);this.data=data||[];this.length=this.data.length;this.compare=compare||defaultCompare;if(data)for(var i=Math.floor(this.length/2);i>=0;i--)this._down(i)}function defaultCompare(a,b){return a<b?-1:a>b?1:0}TinyQueue.prototype={push:function(item){this.data.push(item);this.length++;this._up(this.length-1)},pop:function(){var top=this.data[0];this.data[0]=this.data[this.length-1];this.length--;this.data.pop();this._down(0);return top},peek:function(){return this.data[0]},_up:function(pos){var data=this.data,compare=this.compare;while(pos>0){var parent=Math.floor((pos-1)/2);if(compare(data[pos],data[parent])<0){swap(data,parent,pos);pos=parent}else break}},_down:function(pos){var data=this.data,compare=this.compare,len=this.length;while(true){var left=2*pos+1,right=left+1,min=pos;if(left<len&&compare(data[left],data[min])<0)min=left;if(right<len&&compare(data[right],data[min])<0)min=right;if(min===pos)return;swap(data,min,pos);pos=min}}};function swap(data,i,j){var tmp=data[i];data[i]=data[j];data[j]=tmp}},{}],10:[function(require,module,exports){function geoJsonReduce(e,r,t){return"FeatureCollection"===e.type?e.features.reduce(function(e,t){return geoJsonReduce(t,r,e)},t):r(t,e)}function geoJsonFilterFeatures(e,r){var t=[];return"FeatureCollection"===e.type&&(t=t.concat(e.features.filter(r))),{type:"FeatureCollection",features:t}}function isLineString(e){return"LineString"===e.geometry.type}function topology(e,r){r=r||{};var t=r.keyFn||function(e){return e.join(",")},n=r.precision||1e-5,o=function(e){return e.map(function(e){return Math.round(e/n)*n})},u=geoJsonFilterFeatures(e,isLineString),i=explode(u).features.reduce(function(e,r){var n=o(r.geometry.coordinates);return e[t(n)]=r.geometry.coordinates,e},{}),c=geoJsonReduce(u,function(e,r){return r.geometry.coordinates.forEach(function(n,u,i){if(u>0){var c=t(o(i[u-1])),s=t(o(n));e.push([c,s,r.properties])}}),e},[]);return{vertices:i,edges:c}}var explode=require("@turf/explode");module.exports=topology},{"@turf/explode":5}]},{},[3])(3)});
